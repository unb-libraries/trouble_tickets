<?php
/**
 * @file
 * Trouble Ticket Module for Drupal 7.x
 *
 * This module displays a form for submitting trouble tickets and,
 * when submitted, creates a corresponding ticket in FogBugz and
 * sends the user a confirmation email.
 */

/**
 * Implements hook_help().
 */
function trouble_tickets_help($path, $arg) {
  switch ($path) {
    case "admin/help#trouble_tickets":
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Trouble Tickets module displays a ticket submission form and pushes submitted tickets to FogBugz. Remember to include the FogBugz credentials in the module configuration settings, and to set the module permissions.') . '</p>';
      return $output;

    break;
  }
}

/**
 * Implements hook_theme().
 */
function trouble_tickets_theme() {
  return array(
    'ticket_form_page' => array(
      'template' => 'ticket_form_page',
      'variables' => array('ticket_form' => NULL),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function trouble_tickets_menu() {
  $items = array();
  $items['trouble-tickets'] = array(
    'title' => 'Trouble Tickets',
    'description' => 'Form for submitting trouble tickets',
    'page callback' => '_trouble_tickets_page',
    'access arguments' => array('access trouble_tickets'),
  );
  $items['admin/config/trouble-tickets/fogbugz'] = array(
    'title' => 'FogBugz Credentials',
    'description' => 'Configuration of FogBugz credentials',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fogbugz_config_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function trouble_tickets_permission() {
  return array(
    'access trouble_tickets' => array(
      'title' => t('Access content for the Trouble Tickets module'),
    )
  );
}

/**
 * Page callback: FogBugz credentials configuration.
 *
 * @see trouble_tickets_menu()
 */
function fogbugz_config_form($form, &$form_state) {
  $form['fogbugz_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => variable_get('fogbugz_email'),
    '#size' => 50,
    '#maxlength' => 50,
    '#required' => TRUE,
    '#prefix' => '<p>Enter the credentials for the FogBugz account that will be used for API calls in this module.</p>',
  );
  $form['fogbugz_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('fogbugz_password'),
    '#size' => 50,
    '#maxlength' => 50,
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

/**
 * Returns valid topics for trouble tickets.
 *
 * @return array
 *   Associative array of FogBugz project names (where applicable, for API communication) and topic display names.
 */
function _get_topics() {
  $ticket_topics = array(
    // select options in eResource optgroup should redirect to http://www.lib.unb.ca/help/troubleticket.php: tag as 'eResources'
    'eResources' => array(
      //'eresource' => t('eJournals, eBooks, databases, etc.'),
      //'WorldCat Records' => t('UNB WorldCat records, holdings, and display'),
      'eresource eResources' => t('eJournals, eBooks, databases, etc.'),
      'Worldcat Records eResources' => t('UNB WorldCat records, holdings, and display'),
    ),
    'Systems Group' => array(
      'Proxy / Authentication Issues' => t('Proxy / Authentication Issues'),
      'UNB WorldCat / WMS' => t('WMS'),
      'Document Delivery' => t('Document Delivery / Relais'),
      'Staff Machines / Printers' => t('Staff Machines & Printers'),
      'Public Machines / Printers' => t('Public Machines & Printers'),
      'Library Website' => t('Library Website'),
      'Potential New Systems Projects' => t('New Feature Request or Solution Required'),
      'Reserves' => t('Reserves'),
      'Staff Intranet' => t('Staff Intranet and Projects'),
      'Inbox' => t('Other Systems Issues'),
    ),
    'Centre for Digital Scholarship (ETC)' => array(
      'Centre for Digital Scholarship Projects' => t('CDS Projects'),
      'UNB Scholar' => t('UNB Scholar'),
      'Newspapers' => t('Newspapers'),
    ),
    'Library Maintenance and Operations (FR)' => array(
      'Library Maintenance and Operations' => t('Repairs / Requests'),
    ),
  );
  return $ticket_topics;
}

/**
 * Returns list of Rooms for library maintenance tickets.
 *
 * @return array
 *   Associative array of buildings and their Rooms.
 */
function _get_rooms() {
  $rooms = array(
    'Harriet Irving Library' => array(
      'Room 011B',
      'Room 012A',
      'Room 013A',
      'Room 013B',
      'Room 014A',
      'Room 01A',
      'Room 01B',
      'Room 01C',
      'Room 01D',
      'Room 05A',
      'Room 5A-1',
      'Room 06A',
      'Room 06B',
      'Room 06C',
      'Room 08A',
      'Room 10',
      'Room 102',
      'Room 102A',
      'Room 103A',
      'Room 103B',
      'Room 103C',
      'Room 104B',
      'Room 104C',
      'Room 104E',
      'Room 104F',
      'Room 105',
      'Room 105A',
      'Room 105B',
      'Room 105C',
      'Room 105D',
      'Room 106',
      'Room 107',
      'Room 108',
      'Room 109',
      'Room 110',
      'Room 111',
      'Room 111A',
      'Room 112',
      'Room 112A',
      'Room 112B',
      'Room 113',
      'Room 114',
      'Room 115',
      'Room 115A',
      'Room 115B',
      'Room 115C',
      'Room 116',
      'Room 116C',
      'Room 117',
      'Room 118',
      'Room 11A',
      'Room 11B',
      'Room 11C',
      'Room 12',
      'Room 13',
      'Room 14',
      'Room 15',
      'Room 18',
      'Room 19',
      'Room 20',
      'Room 201A',
      'Room 201B',
      'Room 201C',
      'Room 201D',
      'Room 204',
      'Room 204A',
      'Room 205',
      'Room 206',
      'Room 207',
      'Room 208',
      'Room 209',
      'Room 21',
      'Room 210',
      'Room 211',
      'Room 2',
      'Room 3',
      'Room 301B',
      'Room 301C',
      'Room 302A',
      'Room 302B',
      'Room 303',
      'Room 303A',
      'Room 306',
      'Room 307',
      'Room 308',
      'Room 308A',
      'Room 309',
      'Room 309A',
      'Room 310',
      'Room 311',
      'Room 311A',
      'Room 311B',
      'Room 311C',
      'Room 311D',
      'Room 311E',
      'Room 311F',
      'Room 311G',
      'Room 311H',
      'Room 314',
      'Room 315',
      'Room 316',
      'Room 317',
      'Room 318',
      'Room 319',
      'Room 320',
      'Room 321',
      'Room 322',
      'Room 4',
      'Room 401A',
      'Room 401B',
      'Room 401E',
      'Room 401F',
      'Room 408',
      'Room 408A',
      'Room 409',
      'Room 409A',
      'Room 409B',
      'Room 410',
      'Room 412',
      'Room 412B',
      'Room 413',
      'Room 414',
      'Room 415',
      'Room 415A',
      'Room 416',
      'Room 417',
      'Room 418',
      'Room 419',
      'Room 420',
      'Room 421',
      'Room 5',
      'Room 502',
      'Room 503',
      'Room 504',
      'Room 504A',
      'Room 505',
      'Room 505A',
      'Room 506',
      'Room 506A',
      'Room 507',
      'Room 507A',
      'Room 507B',
      'Room 507C',
      'Room 508',
      'Room 508A',
      'Room 508B',
      'Room 508C',
      'Room 508D',
      'Room 508E',
      'Room 508F',
      'Room 508G',
      'Room 508H',
      'Room 509',
      'Room 509A',
      'Room 509B',
      'Room 509C',
      'Room 510',
      'Room 511',
      'Room 511A',
      'Room 511B',
      'Room 511C',
      'Room 511D',
      'Room 511E',
      'Room 511F',
      'Room 511G',
      'Room 511H',
      'Room 511I',
      'Room 511J',
      'Room 511K',
      'Room 511L',
      'Room 511M',
      'Room 511N',
      'Room 511O',
      'Room 511P',
      'Room 513',
      'Room 514',
      'Room 514A',
      'Room 514B',
      'Room 514C',
      'Room 514D',
      'Room 514E',
      'Room 514F',
      'Room 514G',
      'Room 514H',
      'Room 514I',
      'Room 514J',
      'Room 514K',
      'Room 514L',
      'Room 514M',
      'Room 514N',
      'Room 514O',
      'Room 514P',
      'Room 515',
      'Room 516',
      'Room 516A',
      'Room 516B',
      'Room 516C',
      'Room 517',
      'Room 517A',
      'Room 517B',
      'Room 517C',
      'Room 517D',
      'Room 517E',
      'Room 517F',
      'Room 517G',
      'Room 517H',
      'Room 518',
      'Room 518A',
      'Room 518B',
      'Room 518C',
      'Room 518D',
      'Room 519',
      'Room 519A',
      'Room 520',
      'Room 520A',
      'Room 520B',
      'Room 521',
      'Room 522',
      'Room 6',
      'Room 600',
      'Room 601',
      'Room 7',
      'Room 8',
      'Room 9',
      'Room A',
      'Room A',
      'Room A',
      'Room A',
      'Room A',
      'Room A399',
      'Room A',
      'Room A',
      'Room A',
      'Room A',
      'Room A',
      'Room A',
      'Room A',
      'Room A',
      'Room A',
      'Room A699',
      'Room A',
      'Room A',
      'Room A',
      'Room B',
      'Room B',
      'Room B199',
      'Room B199A',
      'Room B199B',
      'Room B',
      'Room B',
      'Room B',
      'Room B',
      'Room B',
      'Room B',
      'Room B',
      'Room B399',
      'Room B',
      'Room B',
      'Room B',
      'Room B',
      'Room B',
      'Room B',
      'Room C',
      'Room C',
      'Room C',
      'Room C',
      'Room C',
      'Room C399',
      'Room C',
      'Room C499',
      'Room C',
      'Room C698',
      'Room C',
      'Room C',
      'Room D',
      'Room D',
      'Room D',
      'Room D',
      'Room D',
      'Room D',
      'Room D',
      'Room D',
      'Room D',
      'Room D',
      'Room D',
      'Room D499',
      'Room D',
      'Room D698',
      'Room D',
      'Room D',
      'Room D',
      'Room D',
      'Media Storage Areas',
      'Room E',
      'Room E',
      'Room E',
      'Room E',
      'Room E',
      'Room E',
      'Room E399A',
      'Room E',
      'Room E399C',
      'Room E399D',
      'Room E',
      'Room E499',
      'Room E',
      'Room E',
      'Room F',
      'Room F',
      'Room F',
      'Room F',
      'Room F',
      'Room F399',
      'Room F',
      'Room F',
      'Room F499A',
      'Room F499B',
      'Room F499C',
      'Room F499D',
      'Room F',
      'Room F',
      'Room F',
      'Room F',
      'Room G',
      'Room G',
      'Room G',
      'Room G',
      'Room H',
      'Room H',
      'Room H499',
      'Room H',
      'Room I',
      'Room I',
      'Room I399',
      'Room I',
      'Room J199',
      'Room J',
      'Room K',
      'Room L',
      'Room M99',
    ),

    'Science and Forestry Library' => array(
      'Room 101',
      'Room 101A - Central Core',
      'Room 101B - Central Core',
      'Room 101C - Reader Study',
      'Room 101D - Central Core',
      'Room 101E - Reader Study',
      'Room 105',
      'Room 105A',
      'Room 105B',
      'Room 114 - Central Core',
      'Room D199',
      'Room 629C – I.U.C. Central Core',
    ),

    'Engineering and Computer Science Library' => array(
      'Room C8',
      'Room C14',
      'Room C15A',
      'Room C18A',
      'Room C34A',
      'Room C34',
      'Room 609N',
    ),

    'Engineering and Computer Science Library (storage)' => array(
      '609G – Gillin Hall',
      'A117 - Equip Div Stations',
    ),

    'South Gym' => array(
      'Room 198C',
      'Room 201',
      'Room 202',
      'Room 203',
      'Room 204',
      'Room 205',
      'Room 206',
      'Room 207',
      'Room 208',
      'Room 209',
      'Room 298A',
      'Room 298B',
      'Room 299A',
      'Room 299B',
      'Room 299C',
      'Room 630S',
    ),
  );
  return $rooms;
}

/**
 * Returns valid categories for trouble tickets.
 *
 * @param string $topic
 *   Topic of ticket
 *
 * @return array
 *   Associative array of FogBugz category names (for API communication) and display names.
 */
function _get_categories($topic) {
  $ticket_categories = array(
    'Bug' => $topic == 'Library Maintenance and Operations' ? t('Repair') : t('Bug'),
    'Inquiry' => t('Inquiry'),
    'Feature Request' => $topic == 'Library Maintenance and Operations' ? t('Request') : t('Feature Request'),
  );
  return $ticket_categories;
}

/**
 * Returns appropriate ticket priority based on category.
 *
 * @param string $category
 *   Category of ticket
 *
 * @return int
 *   Priority of ticket
 */
function _get_priority($category) {
  switch ($category) {
    case 'Bug':
      return 2;

    break;

    case 'Inquiry':
      return 3;

    break;

    case 'New Feature':
      return 4;

    break;
  }
}

/**
 * Implements hook_form().
 *
 * Form constructor for topic selection and ticket submission.
 * Upon initial load, no topic is selected and the ticket portion of the form is not displayed (unless ticket_topic query string is present in the url).
 * Once a topic is selected, the ticket portion of the form is loaded via AJAX, or on page reload (if javascript is not available).
 *
 * @see trouble_ticket_form_submit
 *
 * @param string $topic
 *   Topic of trouble ticket, as per _get_topics(). Defaults to NULL.
 */
function trouble_tickets_form($form, &$form_state, $topic = NULL) {
  $ticket_topics = array_merge(array('' => '- Select -'), _get_topics());
  $ticket_default = !empty($form_state['values']['ticket_topic']) ? $form_state['values']['ticket_topic']: $topic;
  $ticket_default = $ticket_default != NULL ? $ticket_default : '';

  // add module javascript file
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'trouble_tickets') . '/js/trouble_tickets.js',
  );

  $form['ticket_topic'] = array(
    '#type' => 'select',
    '#title' => t('Select a topic'),
    //'#title_display' => 'invisible',
    '#options' => $ticket_topics,
    '#default_value' => $ticket_default,
    '#required' => TRUE,
    //'#ajax' => array(
    //  'callback' => '_topic_select_callback',
    //  'wrapper' => 'form-container',
    // ),
    '#prefix' => '<div class="needs-js"><h2>Submit a Trouble Ticket</h2>',
    '#suffix' => '</div><noscript>Sorry, Trouble Tickets requires Javascript!</noscript>',
  );

 // $form['topic-submit'] = array(
//    '#type' => 'submit',
//    '#name' => 'topic-submit',
//    '#value' => 'Go',
//    '#id' => 'topic-submit',
//    '#limit_validation_errors' => array(
//      array('ticket_topic'),
//    ),
//    '#submit' => array('topic_submit'),
//  );

  // If a topic has already been selected, create ticket portion of form.
  //if (!empty($form_state['values']['ticket_topic']) || $topic != NULL) {
  if ($topic == NULL) {
    $topic = !empty($form_state['values']['ticket_topic']) ? $form_state['values']['ticket_topic']: $topic;
    $topic_name = _get_topic_name($topic);

    // The div wrapping this fieldset has the same ID ("form-container") as the container/placeholder below.
    // This div replaces the placeholder during the AJAX callback, and is itself replaced during subsequent callbacks.
    $form['ticket_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => 'Trouble Ticket for ' . $topic_name,
      '#prefix' => '<div id="form-container" class="needs-js">',
      '#suffix' => '</div>',
      '#states' => array(
        'visible' => array(
          ':input[name="ticket_topic"]' => array(
            array('value' => t('Proxy / Authentication Issues')),
            array('value' => t('UNB WorldCat / WMS')),
            array('value' => t('Document Delivery')),
            array('value' => t('Staff Machines / Printers')),
            array('value' => t('Public Machines / Printers')),
            array('value' => t('Library Website')),
            array('value' => t('Potential New Systems Projects')),
            array('value' => t('Reserves')),
            array('value' => t('Staff Intranet')),
            array('value' => t('Inbox')),
            array('value' => t('Centre for Digital Scholarship Projects')),
            array('value' => t('UNB Scholar')),
            array('value' => t('Newspapers')),
            array('value' => t('Library Maintenance and Operations')),
          ),
        ),
      ),
    );

    $form['ticket_fieldset']['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#size' => 75,
      '#maxlength' => 250,
      '#required' => TRUE,
    );

    // "Potential New Systems Projects" topic automatically gets category of "Feature Request"
    if ($topic == 'Potential New Systems Projects') {
      $form['ticket_fieldset']['category'] = array(
        '#type' => 'hidden',
        '#title' => t('Category'),
        '#value' => 'Feature Request',
        '#required' => TRUE,
      );
    }
    else {
      $options = _get_categories($topic);
      $form['ticket_fieldset']['category'] = array(
        '#type' => 'radios',
        '#title' => t('Category'),
        '#options' => $options,
        '#default_value' => 'Bug',
        '#required' => TRUE,
        '#prefix' => '<div class="container-inline">',
        '#suffix' => '</div>',
      );
    }

    // "Library Maintenance & Operations" gets additional location selection fields
    if ($topic == 'Library Maintenance and Operations') {
      $options = array_merge(array('Not Applicable'), array_keys(_get_rooms()));
      $options = array_combine($options, $options);
      $form['ticket_fieldset']['building'] = array(
        '#type' => 'select',
        '#title' => t('Location'),
        '#name' => 'building',
        '#options' => $options,
        '#default_value' => 'NA',
        '#required' => TRUE,
        '#ajax' => array(
          'callback' => '_building_select_callback',
          'wrapper' => 'form-container',
        ),
        '#element_validate' => array('_validate_building'),
      );

      // If building has been selected or if a ticket topic get parameter exists (i.e., no JS), add room select
      $show_rooms = !empty($form_state['values']['building']) || array_key_exists('ticket_topic', drupal_get_query_parameters()) ? TRUE : FALSE;
      if ($show_rooms) {
        if (!empty($form_state['values']['building'])) {
          $building = $form_state['values']['building'];
          $all_rooms = _get_rooms();
          $options = array_merge(array('Not Applicable'), $all_rooms[$building]);
          $options = array_combine($options, $options);
        }
        else {
          $options = array_merge(array('Not Applicable' => 'Not Applicable'), _get_rooms());
          foreach ($options as $building => $rooms) {
            if ($building != ('Not Applicable')) {
              $options[$building] = array_combine($rooms, $rooms);
            }
          }
        }
        $form['ticket_fieldset']['room'] = array(
          '#type' => 'select',
          '#title' => t('Room'),
          '#options' => $options,
          '#default_value' => 'NA',
          '#required' => TRUE,
        );
      }
    }

    $form['ticket_fieldset']['description'] = array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#resizeable' => TRUE,
      '#rows' => 10,
      '#cols' => 70,
      '#required' => TRUE,
    );

    $allowed_file_ext = 'gif jpg png zip';
    $max_file_size = 8 * 1024 * 1024;
    $form['ticket_fieldset']['file'] = array(
      '#type' => 'managed_file',
      '#title' => t('Screenshot'),
      '#description' => t("You may optionally attach a screenshot to this trouble ticket.<br/>
        Valid extensions are <b>%allowed_file_ext</b>. File size cannot be > <b>%max_file_sizeMB</b>.", array(
          '%allowed_file_ext' => $allowed_file_ext,
          '%max_file_size' => $max_file_size / 1024 / 1024,
         )
      ),
      '#upload_location' => 'public://trouble_tickets',
      '#upload_validators' => array(
        'file_validate_extensions' => array(
          $allowed_file_ext
        ),
        'file_validate_size' => array(
          $max_file_size
        ),
      ),
    );

    $form['ticket_fieldset']['submit'] = array(
      '#type' => 'submit',
      '#name' => 'ticket-submit',
      '#value' => 'Submit',
      '#id' => 'ticket-submit',
      '#submit' => array('ticket_submit'),
      '#ajax' => array(
        'callback' => '_ticket_submit_callback',
      ),
    );
  }
  else {
    // Container that acts as a placeholder for the ticket portion of the form
    // until the ticket portion is loaded by the AJAX callback _topic_select_callback.
    // This container is removed and replaced during the above-noted callback.
    $form['form_container'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'form-container',
      ),
    );
  }

  return $form;
}

/**
 * Custom page callback function, declared in trouble_tickets_menu().
 *
 * If query string with (valid) topic is present in the URL, the ticket form for that topic is loaded immediately.
 */
function _trouble_tickets_page() {
  $variables = array(
    'ticket_form' => drupal_get_form('trouble_tickets_form'),
  );
  $get = drupal_get_query_parameters();
  if (array_key_exists('ticket_topic', $get)) {
    if (_is_valid_topic($get['ticket_topic'])) {
      $topic = $get['ticket_topic'];
      $variables['ticket_form'] = drupal_get_form('trouble_tickets_form', $topic);
    }
    else {
      drupal_set_message(t('Please select a topic'), 'error');
    }
  }

  $output = theme('ticket_form_page', $variables);
  return $output;
}

/**
 * AJAX callback for trouble_tickets_form() when topic is selected.
 *
 * If the topic is "eresource" the user gets redirected the the eresources ticket page.
 * Other valid ticket topics will load the ticket portion of the form.
 */
function _topic_select_callback($form, &$form_state) {
  $ticket_topic = $form_state['values']['ticket_topic'];
  $commands = _refresh_messages();

  if ($ticket_topic == 'eresource' || $ticket_topic == 'WorldCat Records') {
    ctools_include('ajax');
    $commands[] = ctools_ajax_command_redirect('http://www.lib.unb.ca/help/troubleticket.php');
  }
  elseif (_is_valid_topic($ticket_topic)) {
    $new_form_render = drupal_render($form['ticket_fieldset']);
    $commands[] = ajax_command_replace('#form-container', $new_form_render);
  }
  else {
    $new_form_render = drupal_render($form['form_container']);
    $commands[] = ajax_command_replace('#form-container', $new_form_render);
  }

  //return array('#type' => 'ajax', '#commands' => $commands);
  $page = array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
  return $page;
}

/**
 * AJAX callback for trouble_tickets_form() when building is selected (applicable for Library Maintenance topic only).
 *
 * Applicable rooms are loaded in a select based on the building selected.
 */
function _building_select_callback($form, &$form_state) {
  $building = $form_state['values']['building'];
  $commands = _refresh_messages();

  $new_form_render = drupal_render($form['ticket_fieldset']);
  $commands[] = ajax_command_replace('#form-container', $new_form_render);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 */
function _is_valid_topic($topic) {
  $valid_topics = _get_topics();
  foreach ($valid_topics as $topic_set) {
    if (array_key_exists($topic, $topic_set)) {
      return true;
    }
  }
  return false;
}

/**
 */
function _get_topic_name($topic) {
  $valid_topics = _get_topics();
  foreach ($valid_topics as $topic_set) {
    if (array_key_exists($topic, $topic_set)) {
      return $topic_set[$topic];
    }
  }
}

/**
 * Form submission handler for topic selection portion of trouble_tickets_form().
 *
 * This submission handler is only used when JavaScript is not enabled.
 * Otherwise, the AJAX callback is used to handle topic selection.
 * If the topic is "eresource" the user gets redirected the the eresources ticket page.
 * Other valid ticket topics will load the ticket portion of the form.
 * Invalid topics will cause an error message to be displayed after submit.
 *
 * @see _topic_select_callback()
 */
function topic_submit($form, &$form_state) {
  $ticket_topic = $form_state['values']['ticket_topic'];
  if ($ticket_topic == 'eresource') {
    drupal_goto('http://www.lib.unb.ca/help/troubleticket.php');
  }
  elseif (_is_valid_topic($ticket_topic)) {
    drupal_goto(current_path(), array('query' => array('ticket_topic' => $ticket_topic)));
  }
}

/**
 * Element validation for 'building' in trouble_tickets_form().
 *
 * Throws error if a room is selected and a building is not.
 *
 */
function _validate_building($element, &$form_state, $form) {
  $building = $element['#value'];
  $room = $form_state['values']['room'];
  $room = $room == '' ? 'Not Applicable' : $room;
  if ($room != 'Not Applicable' && $building == 'Not Applicable') {
    form_error($element, t('Please select the building in which the selected room is located.'));
  }
}

/**
 * AJAX callback for trouble_tickets_form() when ticket is submitted.
 *
 * Refreshes the messages via AJAX and removes the ticket portion of form if submission was successful.
 * ticket_submit() is also called when the ticket is submitted, which takes care of form handling.
 *
 * @see ticket_submit()
 */
function _ticket_submit_callback($form, &$form_state) {
  $commands = _refresh_messages();
  if (!form_get_errors()) {
    $form['ticket_fieldset']['title']['#value'] = '';
    $form['ticket_fieldset']['category']['#value'] = '';
    $form['ticket_fieldset']['description']['#value'] = '';
    $form['ticket_fieldset']['building']['#value'] = '';
    $form['ticket_fieldset']['room']['#value'] = '';
    $new_form_render = drupal_render($form['ticket_fieldset']);
    $commands[] = ajax_command_replace('#form-container', $new_form_render);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Form submission handler for ticket selection portion of trouble_tickets_form().
 *
 * Used in conjunction with AJAX callback _ticket_submit_callback().
 *
 * @see _ticket_submit_callback()
 */
function ticket_submit($form, &$form_state) {
  $token = _get_fog_bugz_token();
  if ($token == NULL) {
    drupal_set_message(t('Connection to FogBugz failed. Please contact the site administrator.'), 'error');
    return;
  }
  $success = _create_fogbugz_ticket($token, $form_state);
  if ($success) {
    drupal_set_message(t('Your trouble ticket was successfully submitted. A confirmation email will be sent to your UNB email address.'));
  }
  else {
    drupal_set_message(t('Your trouble ticket was not successfully submitted. If this error persists, please contact the site administrator.'), 'error');
  }
}

/**
 * Clears previously displayed messages, displays new messages, and resets messages queue.
 */
function _refresh_messages($commands = array()) {
  $commands[] = ajax_command_remove('div#messages');
  $commands[] = ajax_command_before('div.region-content', '<div id="messages"><div class="section clearfix">' . theme('status_messages') . "</div></div>");
  return $commands;
}

/**
 * Authenticates Mr. Robot through the FogBugz API and generates a token for subsequent API calls.
 *
 * @return string
 *   Token for FogBugz API calls
 */
function _get_fog_bugz_token() {

  $curl_handle = curl_init('https://support.lib.unb.ca/api.asp?cmd=logon');

  curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl_handle, CURLOPT_POST, TRUE);
  $ch_post_data = array(
    'email' => variable_get('fogbugz_email'),
    'password' => variable_get('fogbugz_password'),
  );
  curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $ch_post_data);

  $curl_response = curl_exec($curl_handle);
  $token = NULL;
  if ($curl_response) {
    $xml = simplexml_load_string($curl_response, 'SimpleXMLElement', LIBXML_NOCDATA);
    $token = (string) $xml->token;
  }
  curl_close($curl_handle);

  return $token;

}

/**
 * Create a ticket in the FogBugz system based on user input from the ticket form.
 *
 * @param string $token
 *   Token for FogBugz API calls
 * @param array $form_state
 *   Form state
 *
 * @return bool
 *   TRUE if ticket creation successfully returned a case ID, FALSE if not
 */
function _create_fogbugz_ticket($token, $form_state) {

  $ticket_information = array(
    'project' => $form_state['values']['ticket_topic'],
    'title' => $form_state['values']['title'],
    'category' => $form_state['values']['category'],
    'description' => $form_state['values']['description'],
  );
  $ticket_information['priority'] = _get_priority($ticket_information['category']);

  // Get Drupal username append "@unb.ca" to form customer email.
  global $user;
  $active_user = user_load($user->uid);
  $username = $active_user->name;
  $username = $username == 'admin' ? 'libsystems' : $username;
  $firstname = isset($active_user->field_first_name['und']['0']['value']) ? $active_user->field_first_name['und']['0']['value'] : '';
  $lastname = isset($active_user->field_last_name['und']['0']['value']) ? $active_user->field_last_name['und']['0']['value'] : '';

  if ($firstname != '' && $lastname != '') {
    $ticket_information['email'] = $firstname . " " . $lastname . " <" . $username . '@unb.ca>';
  }
  else {
    $ticket_information['email'] = $username . '@unb.ca';
  }

  if ($ticket_information['project'] == 'Public Machines / Printers' || $ticket_information['project'] == 'Library Maintenance and Operations') {
    $ticket_information['email'] .= '; Alicia McLaughlin <amclaugh@unb.ca>';
  }

  // If topic is Library Maintenance, add location to description
  if ($form_state['values']['ticket_topic'] == 'Library Maintenance and Operations') {
    $location = '';
    if (isset($form_state['values']['building']) && $form_state['values']['building'] != 'Not Applicable') {
      $location .= $form_state['values']['building'] . ', ';
      if (isset($form_state['values']['room']) && $form_state['values']['room'] != 'Not Applicable') {
        $location .= $form_state['values']['room'];
      }
      else {
        $location .= 'room not specified';
      }
    }

    if ($location != '') {
      $ticket_information['description'] .= "\n\nLocation: " . $location;
    }
  }

  $sEvent = "Submitted by: " . $firstname . " " . $lastname . "\n\n" . $ticket_information['description'];

  $curl_handle = curl_init('https://support.lib.unb.ca/api.asp?cmd=new');
  curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl_handle, CURLOPT_POST, TRUE);
  $ch_post_data = array(
    'token' => $token,
    'sProject' => $ticket_information['project'],
    'sTitle' => $ticket_information['title'],
    'sCategory' => $ticket_information['category'],
    'sEvent' => $sEvent,
    'ixPriority' => $ticket_information['priority'],
    'sTags' => 'trouble_ticket',
    'sCustomerEmail' => $ticket_information['email'],
    'ixMailbox' => 1,
  );
  curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $ch_post_data);
  print_r($ch_post_data);
  exit;
  /*$curl_response = curl_exec($curl_handle);
  $success = FALSE;
  $case_id = NULL;
  if ($curl_response) {
    $xml = simplexml_load_string($curl_response, 'SimpleXMLElement', LIBXML_NOCDATA);
    $case_id = (string) $xml->case['ixBug'];
    if ($case_id != NULL) {
      $ticket_information['case_id'] = $case_id;
      $success = TRUE;
      _send_confirmation_email($token, $ticket_information);
    }
  }
  curl_close($curl_handle);
  */
  return $success;
}

/**
 * Sends an email to the user confirming ticket submission.
 *
 * @param string $token
 *   Token for FogBugz API calls
 * @param array $ticket_information
 *   Associative array of information from the newly submitted ticket
 */
function _send_confirmation_email($token, $ticket_information) {
  $message = "The ticket below has been submitted to FogBugz. Your reference number for this ticket is " . $ticket_information['case_id'] . ".\n\n";
  $message .= "Topic: " . _get_topic_name($ticket_information['project']) . "\n";
  $message .= "Category: " . $ticket_information['category'] . "\n";
  $message .= "Title: " . $ticket_information['title'] . "\n";
  $message .= "Description: " . $ticket_information['description'] . "\n";

  $to = $ticket_information['email'];

  if ($ticket_information['project'] == 'Library Maintenance and Operations') {
    $to .= '; mtiozzo@unb.ca';
  }

  $curl_handle = curl_init('https://support.lib.unb.ca/api.asp?cmd=forward');
  curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl_handle, CURLOPT_POST, TRUE);
  $ch_post_data = array(
    'token' => $token,
    'ixBug' => $ticket_information['case_id'],
    'sFrom' => 'libsystems@unb.ca',
    'sTo' => $to,
    'sSubject' => 'Your trouble ticket has been submitted (Case ' . $ticket_information['case_id'] . ')',
    'sEvent' => $message,
  );
  curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $ch_post_data);
  curl_exec($curl_handle);
  curl_close($curl_handle);
}
